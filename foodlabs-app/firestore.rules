rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && getUserRole() == 'super_admin';
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() in ['super_admin', 'admin_national', 'admin_regional'];
    }
    
    function isBusiness() {
      return isAuthenticated() && getUserRole() == 'business';
    }
    
    function isCustomer() {
      return isAuthenticated() && getUserRole() == 'customer';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isComercioOwner(comercioId) {
      return isAuthenticated() && 
             getUserRole() == 'business' && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId == comercioId;
    }
    
    // Users collection
    match /users/{userId} {
      // TEMPORARY: Allow anyone to read users for login (REMOVE IN PRODUCTION)
      allow read: if true;
      
      // Users can read their own data
      allow read: if isOwner(userId);
      
      // Super admins can read all users
      allow read: if isSuperAdmin();
      
      // Users can write their own data
      allow write: if isOwner(userId);
      
      // Super admins can write all users
      allow write: if isSuperAdmin();
    }
    
    // Orders collection
    match /orders/{orderId} {
      // Allow anyone (including guests) to CREATE orders with valid data
      allow create: if request.resource.data.customer != null 
                    && request.resource.data.items != null
                    && request.resource.data.pricing != null
                    && request.resource.data.pricing.total > 0
                    && request.resource.data.status == 'pending';
      
      // Super admins and admins can read all orders
      allow read: if isAdmin();
      
      // Business users can read their own orders
      allow read: if isBusiness() && 
                     resource.data.comercio.id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
      
      // Customers can read their own orders
      allow read: if isCustomer() && 
                     resource.data.customer.userId == request.auth.uid;
      
      // Super admins and admins can write all orders
      allow write: if isAdmin();
      
      // Business users can write their own orders
      allow write: if isBusiness() && 
                      resource.data.comercio.id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
      
      // Customers can update their own pending orders
      allow update: if isCustomer() && 
                       resource.data.customer.userId == request.auth.uid &&
                       resource.data.status == 'pending';
    }
    
    // Inventory collection
    match /inventory/{productId} {
      // Super admins and admins can read/write all inventory
      allow read, write: if isAdmin();
      
      // Business users can read/write their own inventory
      allow read, write: if isBusiness() && 
                           resource.data.comercioId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
      
      // Customers can read inventory (for product availability)
      allow read: if isCustomer();
    }
    
    // Comercios collection
    match /comercios/{comercioId} {
      // Super admins can read/write all comercios
      allow read, write: if isSuperAdmin();
      
      // Admins can read comercios
      allow read: if isAdmin();
      
      // Business users can read their own comercio
      allow read: if isBusiness() && 
                     resource.id == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
      
      // Anyone can read active comercios (for public display)
      allow read: if resource.data.estado == 'activo';
      
      // TEMPORARY: Allow anyone to read/write comercios for testing
      allow read, write: if true;
    }
    
    // Products collection
    match /products/{productId} {
      // Super admins and admins can read/write all products
      allow read, write: if isAdmin();
      
      // Business users can CREATE products
      allow create: if isBusiness() && 
                       request.resource.data.comercioId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
      
      // Business users can read ALL products (needed for filtering)
      allow read: if isBusiness();
      
      // Business users can write their EXISTING products
      allow update, delete: if isBusiness() && 
                               resource.data.comercioId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
      
      // Customers can read products
      allow read: if isCustomer();
      
      // Anyone can read published products
      allow read: if resource.data.isPublished == true;
      
      // TEMPORARY: Allow anyone to read/write products for testing
      allow read, write: if true;
    }
    
    // Analytics collection (for admin dashboards)
    match /analytics/{document} {
      // Only super admins and admins can access analytics
      allow read, write: if isAdmin();
    }
    
    // Settings collection
    match /settings/{document} {
      // Only super admins can modify settings
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Business users can read their own notifications
      allow read: if isBusiness() && 
                     resource.data.comercioId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
      
      // Super admins and admins can read all notifications
      allow read: if isAdmin();
      
      // Super admins and admins can create notifications
      allow create: if isAdmin();
      
      // Business users can update their own notifications (mark as read)
      allow update: if isBusiness() && 
                       resource.data.comercioId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.comercioId;
    }
    
    // Audit logs collection
    match /audit_logs/{logId} {
      // Only super admins can read audit logs
      allow read: if isSuperAdmin();
      
      // System can write audit logs (this would be done server-side)
      allow write: if false; // Disabled for now, would be handled by Cloud Functions
    }
    
    // Wallets collection
    match /wallets/{walletId} {
      // Users can read their own wallet
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Admins can read all wallets
      allow read: if isAdmin();
      
      // Only system can create/update wallets (handled by Cloud Functions)
      allow write: if false; // Disabled for security, handled by backend services
    }
    
    // Transactions collection
    match /transactions/{transactionId} {
      // Users can read transactions where they are involved
      allow read: if isAuthenticated() && 
                     (resource.data.fromWalletId == get(/databases/$(database)/documents/wallets/$(getWalletId(request.auth.uid))).id ||
                      resource.data.toWalletId == get(/databases/$(database)/documents/wallets/$(getWalletId(request.auth.uid))).id);
      
      // Admins can read all transactions
      allow read: if isAdmin();
      
      // Only system can create transactions (handled by Cloud Functions)
      allow write: if false; // Disabled for security, handled by backend services
    }
    
    // Topup requests collection
    match /topup_requests/{requestId} {
      // Users can read their own topup requests
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Users can create their own topup requests
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.amount > 0 &&
                      request.resource.data.status == 'pending';
      
      // Admins can read all topup requests
      allow read: if isAdmin();
      
      // Only admins can update topup requests (approve/reject)
      allow update: if isAdmin();
    }
    
    // Helper function to get wallet ID for a user
    function getWalletId(userId) {
      return get(/databases/$(database)/documents/wallets/$(userId)).data.id;
    }
  }
}
